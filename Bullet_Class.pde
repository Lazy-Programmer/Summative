class Bullet extends NonLiving {
  int damage;
  int team;
  int range;

  Bullet(PVector tposition, PVector tsize, PVector tvelocity, float torientation, /* GIF STUFF*/ int tdamage, int tteam, int trange) {
    super(tposition, tsize, tvelocity, torientation/*GIF STUFF*/);
    damage = tdamage;
    team = tteam;
    range = trange;
  }

  boolean bulletCollision(ArrayList<Entity> entities) {//advanced collision for bullets as they are more likely to go through objects
    for (int i = 0; i < entities.size(); i++) {
      if (( position.x + size.x/2 >= entities.get(i).position.x && position.x - size.x/2 <= entities.get(i).position.x + entities.get(i).size.x && position.y >= entities.get(i).position.y && position.y <= entities.get(i).position.y + entities.get(i).size.y ) || /* advanced x collision begins*/( ( /* left to right */(position.x + size.x/2 <= entities.get(i).position.x && position.x + size.x/2 + velocity.x*timer.timeSinceLastCall >= entities.get(i).position.x) || /* right to left */ (position.x - size.x/2 >= entities.get(i).position.x + entities.get(i).size.x && position.x - size.x/2 + velocity.x*timer.timeSinceLastCall <= entities.get(i).position.x + entities.get(i).size.x) ) && /* begin y calculations, make sure it does pass through the y values as well */( /* start with inside the y range to outside the y range */(position.y + size.y/2 >= entities.get(i).position.y && position.y - size.y/2 <= entities.get(i).position.y + entities.get(i).size.y && /* see if it went out*/(position.y - size.y/2 + velocity.y*timer.timeSinceLastCall >= entities.get(i).position.y + entities.get(i).size.y || position.y + size.y/2 + velocity.y*timer.timeSinceLastCall <= entities.get(i).position.y)) || /* followed by out of range than in range */ ( /* testing wheather it will be in range, was done first as it was copied and adjusted from in range to out range */position.y + size.y/2 + velocity.y*timer.timeSinceLastCall >= entities.get(i).position.y && position.y - size.y/2  + velocity.y*timer.timeSinceLastCall <= entities.get(i).position.y + entities.get(i).size.y && /* check if it starts out of range */(position.y - size.y/2 >= entities.get(i).position.y + entities.get(i).size.y || position.y + size.y/2 <= entities.get(i).position.y)) || /* finishing off with detecting whether it goes from in range to in range */( position.y + size.y/2 >= entities.get(i).position.y && position.y - size.y/2 <= entities.get(i).position.y + entities.get(i).size.y && position.y + size.y/2 + velocity.y*timer.timeSinceLastCall >= entities.get(i).position.y && position.y - size.y/2 + velocity.y*timer.timeSinceLastCall <= entities.get(i).position.y + entities.get(i).size.y) )) /*){*//* by range in this line I mean between values, in other words, in range for y is " pos.y >= wall.y && pos.y <= wall.y + wall.size.y" and out of range is outside thoses values*/ || /* advanced y collision begins, just copied the advanced x collision and changed "x"s to "y"s, at least thats what I hope I will do and work*/ ( ( /* up to down */(position.y + size.y/2 <= entities.get(i).position.y && position.y + size.y/2 + velocity.y*timer.timeSinceLastCall >= entities.get(i).position.y) || /* down to up */ (position.y - size.y/2 >= entities.get(i).position.y + entities.get(i).size.y && position.y - size.y/2 + velocity.y*timer.timeSinceLastCall <= entities.get(i).position.y + entities.get(i).size.y) ) && /* begin x calculations, make sure it does pass through the x values as well */( /* start with inside the x range to outside the x range */(position.x + size.x/2 >= entities.get(i).position.x && position.x - size.x/2 <= entities.get(i).position.x + entities.get(i).size.x && /* see if it went out*/(position.x - size.x/2 + velocity.x*timer.timeSinceLastCall >= entities.get(i).position.x + entities.get(i).size.x || position.x + size.x/2 + velocity.x*timer.timeSinceLastCall <= entities.get(i).position.x)) || /* followed by out of range than in range */ ( /* testing wheather it will be in range, was done first as it was copied and adjusted from in range to out range */position.x + size.x/2 + velocity.x*timer.timeSinceLastCall >= entities.get(i).position.x && position.x - size.x/2  + velocity.x*timer.timeSinceLastCall <= entities.get(i).position.x + entities.get(i).size.x && /* check if it starts out of range */(position.x - size.x/2 >= entities.get(i).position.x + entities.get(i).size.x || position.x + size.x/2 <= entities.get(i).position.x)) || /* finishing off with detecting whether it goes from in range to in range */( position.x + size.x/2 >= entities.get(i).position.x && position.x - size.x/2 <= entities.get(i).position.x + entities.get(i).size.x && position.x + size.x/2 + velocity.x*timer.timeSinceLastCall >= entities.get(i).position.x && position.x - size.x/2 + velocity.x*timer.timeSinceLastCall <= entities.get(i).position.x + entities.get(i).size.x) )) ) {/* by range in this line I mean between values, in other words, in range for x is " pos.x >= wall.x && pos.x <= wall.x + wall.size.x" and out of range is outside thoses values*/
        if (entities.get(i) instanceof Living) {
          entities.get(i).health -= damage;
        }
        return true;
      }
    }
    return false;
  }
}
